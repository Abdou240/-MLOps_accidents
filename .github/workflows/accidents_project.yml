# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Test of system orchestration

on:
  push:
    branches: [ "daniel" ]
  pull_request:
    branches: [ "daniel" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
    - name: Run all containers
      run: |
        bash setup.sh
        sleep 10  # Wait for the container to start
        export CONTAINER_ID_1=$(docker-compose -f docker-compose/docker-compose.yml ps -q model)
        export CONTAINER_ID_2=$(docker-compose -f docker-compose/docker-compose.yml ps -q mlflow)
        export CONTAINER_ID_3=$(docker-compose -f docker-compose/docker-compose.yml ps -q model_api)
        export CONTAINER_ID_4=$(docker-compose -f docker-compose/docker-compose.yml ps -q api)
        export CONTAINER_ID_5=$(docker-compose -f docker-compose/docker-compose.yml ps -q streamlit)
        export CONTAINER_ID_6=$(docker-compose -f docker-compose/docker-compose.yml ps -q database)

    - name: Run curl tests
      run: |
        # model_api
        curl http://localhost:8050/status -X GET
        # database
        curl -X 'POST' 'http://localhost:9090/admin/manage_users' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{"action": "add", "target_username": "new_user_3", "target_password": "Test", "target_permission": "Superuser"}'
        curl -X 'POST' 'http://localhost:9090/admin/manage_users' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{"username": "Test_admin", "password": "Test_admin_password", "action": "modify", "current_username": "new_user_3", "target_username": "new_user_1", "target_password": "Test_2", "target_permission": "Admin"}'
        curl -X 'POST' 'http://localhost:9090/admin/manage_users' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{"username": "Test_admin", "password": "Test_admin_password", "action": "delete", "current_username": "new_user_1"}'
        curl -X 'GET' 'http://localhost:9090/data_test' -H 'accept: application/json'
        curl -X 'POST' 'http://localhost:9090/data' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{"query": "select count(*) from dataset;"}'
        # api
        curl http://localhost:8090/status/api -X GET
        curl http://localhost:8090/status/model -X GET
        curl http://localhost:8090/status/datbase -X GET

     #    CONTAINER_ID=$(docker-compose -f docker-compose/docker-compose.yml ps -q model_api)


    - name: Run tests in python script
      run: python workflow_test.py 
      # $CONTAINER_ID_1 $CONTAINER_ID_2 $CONTAINER_ID_3  $CONTAINER_ID_4 $CONTAINER_ID_5 $CONTAINER_ID_6

    - name: Stop Docker containers
      run: docker-compose -f docker-compose/docker-compose.yml down
